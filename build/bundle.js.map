{"version":3,"sources":["../src/bundle.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AAGpC,MAAM,SAAS,GAAG,CAAC,QAAgB;IAClC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AAC1B,CAAC,CAAC;AAEF;IAoBC;;;;;;;;;;OAUG;IACH,YACC,SAAgC,EAChC,UAAkB,EAClB,YAAoB,EACpB,OAA2C,SAAS;QAEpD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEM,kBAAkB,CAAC,QAAgB;QACzC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;CACD;AA9CD,yBA8CC","file":"bundle.js","sourcesContent":["import * as Promise from 'bluebird';\nimport * as _ from 'lodash';\n\nconst emptyHook = (contents: string): Promise<void> => {\n\treturn Promise.resolve();\n};\n\nexport default class Bundle {\n\tpublic tarStream: NodeJS.ReadableStream;\n\n\t/**\n\t * deviceType: The slug of the device type that this bundle has been created\n\t * for\n\t */\n\tpublic deviceType: string;\n\n\t/**\n\t * architecture: The architecture that this resin bundle is targeting\n\t */\n\tpublic architecture: string;\n\n\t/**\n\t * dockerfileHook: A function to be called with the resolved dockerfile\n\t * Note: The resolver will wait until the promise resolves before continuing\n\t */\n\tprivate dockerfileHook: (content: string) => Promise<void>;\n\n\t/**\n\t * constructor: Initialise a resin-bundle with a tar archive stream\n\t *\n\t * @param tarStream\n\t *\tA readable stream which when consumed will produce a tar archive containing\n\t *\ta resin bundle\n\t * @param deviceType\n\t *  The machine name of the device that this resin bundle is currently targeting\n\t * @param architecture\n\t *  The architecture that this resin bundle is currently targeting\n\t */\n\tpublic constructor(\n\t\ttarStream: NodeJS.ReadableStream,\n\t\tdeviceType: string,\n\t\tarchitecture: string,\n\t\thook: (content: string) => Promise<void> = emptyHook\n\t) {\n\t\tthis.tarStream = tarStream;\n\t\tthis.deviceType = deviceType;\n\t\tthis.architecture = architecture;\n\t\tthis.dockerfileHook = hook;\n\t}\n\n\tpublic callDockerfileHook(contents: string): Promise<void> {\n\t\treturn this.dockerfileHook(contents);\n\t}\n}\n"],"sourceRoot":"src"}