{"version":3,"sources":["../src/resolvers/archDockerfile.ts"],"names":[],"mappings":";;AAAA,oCAAmC;AAEnC,6BAA4B;AAS5B;IAAA;QACQ,aAAQ,GAAG,CAAC,CAAA;QACZ,SAAI,GAAG,gCAAgC,CAAA;QAEtC,oBAAe,GAA6B,EAAE,CAAA;IAmDvD,CAAC;IA/CO,KAAK,CAAC,IAAc;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC;YAClE,kDAAkD;YAClD,yDAAyD;YAEzD,+CAA+C;YAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAC7C,EAAE,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAA;YACvC,CAAC;QACF,CAAC;IACF,CAAC;IAEM,WAAW,CAAC,MAAc;QAChC,wDAAwD;QACxD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU;YACnC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,cAAc,GAAG,UAAU,CAAA;YACjC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAA;YACtC,CAAC;QACF,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC;eACtC,CAAC,IAAI,CAAC,mBAAmB,KAAK,SAAS,CAAC,CAAA;IAC7C,CAAC;IAEM,OAAO,CAAC,MAAc;QAC5B,4DAA4D;QAC5D,yDAAyD;QACzD,eAAe;QAEf,+BAA+B;QAC/B,IAAI,SAAiC,CAAA;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;YAC5C,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAA;QACrC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7C,SAAS,GAAG,IAAI,CAAC,cAAc,CAAA;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAA;QACvF,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACvB,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI;gBACvB,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ;aAC/B,CAAC,CAAC,CAAA;IACJ,CAAC;CACD;AAvDD,yCAuDC","file":"archDockerfile.js","sourcesContent":["import * as Promise from 'bluebird'\nimport * as _ from 'lodash'\nimport * as path from 'path'\n\nimport { Bundle, FileInfo, Resolver } from '../resolver'\n\n// Internal tuple to pass files and their extensions around\n// the class\n// ArchSpecificDockerfile = [extension, file info]\ntype ArchSpecificDockerfile = [string, FileInfo]\n\nexport default class ArchDockerfileResolver implements Resolver {\n\tpublic priority = 1\n\tpublic name = 'Archicture-specific Dockerfile'\n\n\tprivate archDockerfiles: ArchSpecificDockerfile[] = []\n\tprivate satisifiedArch: ArchSpecificDockerfile\n\tprivate satisfiedDeviceType: ArchSpecificDockerfile\n\n\tpublic entry(file: FileInfo): void {\n\t\tif (file.name.substr(0, file.name.indexOf('.')) === 'Dockerfile') {\n\t\t\t// If it's a dockerfile with an extension, save it\n\t\t\t// unless it's a Dockerfile.template, in which case don't\n\n\t\t\t// Remove the . from the start of the extension\n\t\t\tconst ext = path.extname(file.name).substr(1)\n\t\t\tif (ext !== 'template') {\n\t\t\t\tthis.archDockerfiles.push([ext, file])\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic isSatisfied(bundle: Bundle): boolean {\n\t\t// Check for both satisfied architecture and device type\n\t\tthis.archDockerfiles.map((dockerfile) => {\n\t\t\tif (dockerfile[0] === bundle.architecture) {\n\t\t\t\tthis.satisifiedArch = dockerfile\n\t\t\t} else if (dockerfile[0] === bundle.deviceType) {\n\t\t\t\tthis.satisfiedDeviceType = dockerfile\n\t\t\t}\n\t\t})\n\t\treturn (this.satisifiedArch !== undefined)\n\t\t\t|| (this.satisfiedDeviceType !== undefined)\n\t}\n\n\tpublic resolve(bundle: Bundle): Promise<FileInfo[]> {\n\t\t// Return the satisfied arch/deviceType specific dockerfile,\n\t\t// as a plain Dockerfile, and the docker daemon will then\n\t\t// execute that\n\n\t\t// device type takes precedence\n\t\tlet satisfied: ArchSpecificDockerfile\n\t\tif (this.satisfiedDeviceType !== undefined) {\n\t\t\tsatisfied = this.satisfiedDeviceType\n\t\t} else if(this.satisifiedArch !== undefined) {\n\t\t\tsatisfied = this.satisifiedArch\n\t\t} else {\n\t\t\tthrow new Error('Resolve called without a satisfied architecture specific dockerfile')\n\t\t}\n\n\t\treturn Promise.resolve([{\n\t\t\tname: 'Dockerfile',\n\t\t\tsize: satisfied[1].size,\n\t\t\tcontents: satisfied[1].contents\n\t\t}])\n\t}\n}\n"],"sourceRoot":"../src"}