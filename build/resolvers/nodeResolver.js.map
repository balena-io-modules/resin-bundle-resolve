{"version":3,"sources":["../src/resolvers/nodeResolver.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AAEpC,4BAA4B;AAC5B,mCAAmC;AACnC,iCAAiC;AAEjC,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AAErE,kDAAkD;AAIlD,2DAA2D;AAC3D,MAAM,YAAY,GAAG,SAAS,CAAC;AAE/B,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;AAC3E,MAAM,YAAY,GAEd,IAAI,WAAW,CAAC;IACnB,MAAM,EAAE,IAAI,GAAG,IAAI;IACnB,OAAO,EAAE,CAAC,UAAkB;QAC3B,MAAM,GAAG,GAAG,CAAC,IAAc,EAAE,GAAW;YACvC,MAAM,CAAC,QAAQ,CAAC;gBACf,GAAG;gBACH,IAAI,EAAE,IAAI;aACV,CAAC;iBACA,GAAG,CAAC,CAAC,CAAC;iBACN,IAAI,CAAC,CAAC,GAAmD;gBACzD,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC;gBACpE,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAE/B,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;YACF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,2BAA2B;QAC3B,MAAM,CAAC,GAAG,CACT,EAAE,EACF,gDAAgD,UAAU,2BAA2B,CACrF,CAAC;IACH,CAAC;CACD,CAAC,CAAC;AAEH;IAAA;QACQ,aAAQ,GAAG,CAAC,CAAC;QACb,SAAI,GAAG,QAAQ,CAAC;QAGf,eAAU,GAAG,KAAK,CAAC;IA0E5B,CAAC;IAxEO,KAAK,CAAC,IAAc;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACxB,CAAC;IACF,CAAC;IAEM,WAAW,CAAC,MAAc;QAChC,MAAM,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC;IACxC,CAAC;IAEM,OAAO,CAAC,MAAc;QAC5B,gDAAgD;QAChD,oEAAoE;QACpE,uEAAuE;QACvE,eAAe;QACf,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC;aACvE,KAAK,CAAC,CAAC,CAAQ;YACf,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC;aACD,IAAI,CAAC,WAAW;YAChB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC9B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACxD,CAAC;YAED,IAAI,CAAC,UAAU;gBACd,IAAI,CAAC,UAAU;oBACf,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC;yBACpB,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,CAAC;yBAC5C,IAAI,EAAE,GAAG,CAAC,CAAC;YAEd,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;YACtD,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,IAAI,KAAK,CACd,wDAAwD,CACxD,CAAC;YACH,CAAC;YACD,MAAM,KAAK,GAAW,UAAU,IAAI,YAAY,CAAC,CAAC,oCAAoC;YAEtF,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ;gBACvD,MAAM,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAE1D,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;oBACzB,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;gBAC3D,CAAC;gBAED,IAAI,UAAkB,CAAC;gBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBACrB,UAAU,GAAG;mBACA,MAAM,CAAC,UAAU,SAAS,WAAW;;;;;;OAMjD,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,UAAU,GAAG;mBACA,MAAM,CAAC,UAAU,SAAS,WAAW;;MAElD,CAAC;gBACF,CAAC;gBACD,MAAM,IAAI,GAAa;oBACtB,IAAI,EAAE,YAAY;oBAClB,IAAI,EAAE,UAAU,CAAC,MAAM;oBACvB,QAAQ,EAAE,IAAI,MAAM,CAAC,UAAU,CAAC;iBAChC,CAAC;gBACF,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACD;AA/ED,+BA+EC","file":"nodeResolver.js","sourcesContent":["import * as Promise from 'bluebird';\n\nimport * as _ from 'lodash';\nimport * as request from 'request';\nimport * as semver from 'semver';\n\nconst getAsync = Promise.promisify(request.get, { multiArgs: true });\n\nimport * as BluebirdLRU from 'bluebird-lru-cache';\n\nimport { Bundle, FileInfo, Resolver } from '../resolver';\n\n// Used below for when no engine version can be determined.\nconst DEFAULT_NODE = '0.10.22';\n\nconst versionTest = RegExp.prototype.test.bind(/^[0-9]+\\.[0-9]+\\.[0-9]+$/);\nconst versionCache: {\n\tget: (deviceType: string) => Promise<string[]>;\n} = new BluebirdLRU({\n\tmaxAge: 3600 * 1000, // 1 hour\n\tfetchFn: (deviceType: string) => {\n\t\tconst get = (prev: string[], url: string): Promise<string[]> => {\n\t\t\treturn getAsync({\n\t\t\t\turl,\n\t\t\t\tjson: true\n\t\t\t})\n\t\t\t\t.get(1)\n\t\t\t\t.then((res: { results: { name: string }[]; next?: string }) => {\n\t\t\t\t\tconst curr = _(res.results).map('name').filter(versionTest).value();\n\t\t\t\t\tconst tags = prev.concat(curr);\n\n\t\t\t\t\tif (res.next != null) {\n\t\t\t\t\t\treturn get(tags, res.next);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn tags;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n\n\t\t// 100 is the max page size\n\t\treturn get(\n\t\t\t[],\n\t\t\t`https://hub.docker.com/v2/repositories/resin/${deviceType}-node/tags/?page_size=100`\n\t\t);\n\t}\n});\n\nexport default class NodeResolver implements Resolver {\n\tpublic priority = 0;\n\tpublic name = 'NodeJS';\n\n\tprivate packageJsonContent?: Buffer;\n\tprivate hasScripts = false;\n\n\tpublic entry(file: FileInfo): void {\n\t\tif (file.name == 'package.json') {\n\t\t\tthis.packageJsonContent = file.contents;\n\t\t} else if (file.name === 'wscript' || _.endsWith(file.name, '.gyp')) {\n\t\t\tthis.hasScripts = true;\n\t\t}\n\t}\n\n\tpublic isSatisfied(bundle: Bundle): boolean {\n\t\treturn this.packageJsonContent != null;\n\t}\n\n\tpublic resolve(bundle: Bundle): Promise<FileInfo[]> {\n\t\t// Generate a dockerfile which will run the file\n\t\t// Use latest node base image. Don't use the slim image just in case\n\t\t// TODO: Find out which apt-get packages are installed mostly with node\n\t\t// base images.\n\t\treturn Promise.try(() => JSON.parse(this.packageJsonContent!.toString()))\n\t\t\t.catch((e: Error) => {\n\t\t\t\tthrow new Error(`package.json: ${e.message}`);\n\t\t\t})\n\t\t\t.then(packageJson => {\n\t\t\t\tif (!_.isObject(packageJson)) {\n\t\t\t\t\tthrow new Error('package.json: must be a JSON object');\n\t\t\t\t}\n\n\t\t\t\tthis.hasScripts =\n\t\t\t\t\tthis.hasScripts ||\n\t\t\t\t\t_(packageJson.scripts)\n\t\t\t\t\t\t.pick('preinstall', 'install', 'postinstall')\n\t\t\t\t\t\t.size() > 0;\n\n\t\t\t\tconst nodeEngine = _.get(packageJson, 'engines.node');\n\t\t\t\tif (nodeEngine != null && !_.isString(nodeEngine)) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'package.json: engines.node must be a string if present'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst range: string = nodeEngine || DEFAULT_NODE; // Keep old default for compatiblity\n\n\t\t\t\treturn versionCache.get(bundle.deviceType).then(versions => {\n\t\t\t\t\tconst nodeVersion = semver.maxSatisfying(versions, range);\n\n\t\t\t\t\tif (nodeVersion == null) {\n\t\t\t\t\t\tthrow new Error(`Couldn't satisfy node version ${range}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet dockerfile: string;\n\t\t\t\t\tif (this.hasScripts) {\n\t\t\t\t\t\tdockerfile = `\n\t\t\t\t\t\tFROM resin/${bundle.deviceType}-node:${nodeVersion}\n\t\t\t\t\t\tRUN mkdir -p /usr/src/app && ln -s /usr/src/app /app\n\t\t\t\t\t\tWORKDIR /usr/src/app\n\t\t\t\t\t\tCOPY . /usr/src/app\n\t\t\t\t\t\tRUN DEBIAN_FRONTEND=noninteractive JOBS=MAX npm install --unsafe-perm\n\t\t\t\t\t\tCMD [ \"npm\", \"start\" ]\n\t\t\t\t\t\t`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdockerfile = `\n\t\t\t\t\t\tFROM resin/${bundle.deviceType}-node:${nodeVersion}-onbuild\n\t\t\t\t\t\tRUN ln -s /usr/src/app /app\n\t\t\t\t\t`;\n\t\t\t\t\t}\n\t\t\t\t\tconst file: FileInfo = {\n\t\t\t\t\t\tname: 'Dockerfile',\n\t\t\t\t\t\tsize: dockerfile.length,\n\t\t\t\t\t\tcontents: new Buffer(dockerfile)\n\t\t\t\t\t};\n\t\t\t\t\treturn [file];\n\t\t\t\t});\n\t\t\t});\n\t}\n}\n"],"sourceRoot":"../src"}