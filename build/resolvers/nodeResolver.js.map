{"version":3,"sources":["../src/resolvers/nodeResolver.ts"],"names":[],"mappings":";;AAAA,oCAAmC;AAInC;IAAA;QACQ,aAAQ,GAAG,CAAC,CAAA;QACZ,SAAI,GAAG,QAAQ,CAAA;QAEd,mBAAc,GAAG,KAAK,CAAA;IAoC/B,CAAC;IAlCO,KAAK,CAAC,IAAc;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;QAC3B,CAAC;IACF,CAAC;IAEM,WAAW,CAAC,MAAc;QAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAA;IAC3B,CAAC;IAEM,OAAO,CAAC,MAAc;QAC5B,gDAAgD;QAChD,oEAAoE;QACpE,uEAAuE;QACvE,eAAe;QACf,MAAM,UAAU,GAAG,cAAc,MAAM,CAAC,UAAU;;;;;;;;;GASjD,CAAA;QAED,MAAM,IAAI,GAAa;YACtB,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,UAAU,CAAC,MAAM;YACvB,QAAQ,EAAE,IAAI,MAAM,CAAC,UAAU,CAAC;SAChC,CAAA;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;IAC/B,CAAC;CACD;AAxCD,+BAwCC","file":"nodeResolver.js","sourcesContent":["import * as Promise from 'bluebird'\n\nimport { Bundle, FileInfo, Resolver } from '../resolver'\n\nexport default class NodeResolver implements Resolver {\n\tpublic priority = 0\n\tpublic name = 'NodeJS'\n\n\tprivate hasPackageJson = false\n\n\tpublic entry(file: FileInfo): void {\n\t\tif (file.name == 'package.json') {\n\t\t\tthis.hasPackageJson = true\n\t\t}\n\t}\n\n\tpublic isSatisfied(bundle: Bundle): boolean {\n\t\treturn this.hasPackageJson\n\t}\n\n\tpublic resolve(bundle: Bundle): Promise<FileInfo[]> {\n\t\t// Generate a dockerfile which will run the file\n\t\t// Use latest node base image. Don't use the slim image just in case\n\t\t// TODO: Find out which apt-get packages are installed mostly with node\n\t\t// base images.\n\t\tconst dockerfile = `FROM resin/${bundle.deviceType}-node\n\nWORKDIR /usr/src/app\n\nCOPY package.json .\nRUN npm install\n\nCOPY . ./\nCMD [\"npm\", \"start\"]\n\t\t`\n\n\t\tconst file: FileInfo = {\n\t\t\tname: 'Dockerfile',\n\t\t\tsize: dockerfile.length,\n\t\t\tcontents: new Buffer(dockerfile)\n\t\t}\n\n\t\treturn Promise.resolve([file])\n\t}\n}\n"],"sourceRoot":"../src"}