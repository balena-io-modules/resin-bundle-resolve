{"version":3,"sources":["../src/resolvers/dockerfileTemplate.ts"],"names":[],"mappings":";;AAAA,oCAAmC;AAEnC,0DAAyD;AAIzD;IAAA;QACQ,aAAQ,GAAG,CAAC,CAAA;QACZ,SAAI,GAAG,qBAAqB,CAAA;QAE3B,0BAAqB,GAAG,KAAK,CAAA;IAuCtC,CAAC;IApCO,KAAK,CAAC,IAAc;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,qBAAqB,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAA;YACpC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAA;QAClC,CAAC;IACF,CAAC;IAEM,WAAW,CAAC,MAAc;QAChC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAA;IAClC,CAAC;IAEM,OAAO,CAAC,MAAc;QAC5B,MAAM,UAAU,GAAa;YAC5B,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,CAAC;YACP,QAAQ,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC;SACxB,CAAA;QAED,oCAAoC;QACpC,MAAM,IAAI,GAAyC;YAClD,UAAU,EAAE,MAAM,CAAC,YAAY;YAC/B,kBAAkB,EAAE,MAAM,CAAC,UAAU;SACrC,CAAA;QAED,MAAM,CAAC,IAAI,OAAO,CAAa,CAAC,OAAO;YACtC,uEAAuE;YACvE,UAAU,CAAC,QAAQ,GAAG,IAAI,MAAM,CAC/B,kBAAkB,CAAC,OAAO,CACzB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,EAC/B,IAAI,CACJ,CACD,CAAA;YACD,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAA;YAC5C,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAA;QACtB,CAAC,CAAC,CAAA;IACH,CAAC;CACD;AA3CD,6CA2CC","file":"dockerfileTemplate.js","sourcesContent":["import * as Promise from 'bluebird'\n\nimport * as DockerfileTemplate from 'dockerfile-template'\n\nimport { Bundle, FileInfo, Resolver } from '../resolver'\n\nexport default class DockerfileTemplateResolver implements Resolver {\n\tpublic priority = 2\n\tpublic name = 'Dockerfile.template'\n\n\tprivate hasDockerfileTemplate = false\n\tprivate templateContent: Buffer\n\n\tpublic entry(file: FileInfo): void {\n\t\tif (file.name === 'Dockerfile.template') {\n\t\t\tthis.templateContent = file.contents\n\t\t\tthis.hasDockerfileTemplate = true\n\t\t}\n\t}\n\n\tpublic isSatisfied(bundle: Bundle): boolean {\n\t\treturn this.hasDockerfileTemplate\n\t}\n\n\tpublic resolve(bundle: Bundle): Promise<FileInfo[]> {\n\t\tconst dockerfile: FileInfo = {\n\t\t\tname: 'Dockerfile',\n\t\t\tsize: 0,\n\t\t\tcontents: new Buffer('')\n\t\t}\n\n\t\t// Generate the variables to replace\n\t\tconst vars: DockerfileTemplate.TemplateVariables = {\n\t\t\tRESIN_ARCH: bundle.architecture,\n\t\t\tRESIN_MACHINE_NAME: bundle.deviceType\n\t\t}\n\n\t\treturn new Promise<FileInfo[]>((resolve) => {\n\t\t\t// FIXME: submit a PR to DockerfileTemplate to take Buffers as an input\n\t\t\tdockerfile.contents = new Buffer(\n\t\t\t\tDockerfileTemplate.process(\n\t\t\t\t\tthis.templateContent.toString(),\n\t\t\t\t\tvars\n\t\t\t\t)\n\t\t\t)\n\t\t\tdockerfile.size = dockerfile.contents.length\n\t\t\tresolve([dockerfile])\n\t\t})\n\t}\n}\n\n"],"sourceRoot":"../src"}