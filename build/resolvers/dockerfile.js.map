{"version":3,"sources":["../src/resolvers/dockerfile.ts"],"names":[],"mappings":";;AAAA,oCAAmC;AAInC;IAAA;QACQ,aAAQ,GAAG,CAAC,CAAA;QACZ,SAAI,GAAG,qBAAqB,CAAA;QAE3B,kBAAa,GAAY,KAAK,CAAA;IAgBvC,CAAC;IAdO,KAAK,CAAC,IAAc;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;QAC1B,CAAC;IACF,CAAC;IAEM,WAAW;QACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAA;IAC1B,CAAC;IAEM,OAAO;QACb,iEAAiE;QACjE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;CACD;AApBD,qCAoBC","file":"dockerfile.js","sourcesContent":["import * as Promise from 'bluebird'\n\nimport { Bundle, FileInfo, Resolver } from '../resolver'\n\nexport default class DockerfileResolver implements Resolver {\n\tpublic priority = 0\n\tpublic name = 'Standard Dockerfile'\n\n\tprivate gotDockerfile: boolean = false\n\n\tpublic entry(file: FileInfo): void {\n\t\tif (file.name === 'Dockerfile') {\n\t\t\tthis.gotDockerfile = true\n\t\t}\n\t}\n\n\tpublic isSatisfied(): boolean {\n\t\treturn this.gotDockerfile\n\t}\n\n\tpublic resolve(): Promise<FileInfo[]> {\n\t\t// We don't need to add any extra files to the Dockerfile project\n\t\treturn Promise.resolve([])\n\t}\n}\n"],"sourceRoot":"../src"}