{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport * as tar from 'tar-stream';\n\nimport Bundle from './bundle';\nimport { FileInfo } from './fileInfo';\nimport { Resolver } from './resolver';\nimport * as Utils from './utils';\n\n// Import some default resolvers\nimport ArchDockerfileResolver from './resolvers/archDockerfile';\nimport DockerfileResolver from './resolvers/dockerfile';\nimport DockerfileTemplateResolver from './resolvers/dockerfileTemplate';\nimport NodeResolver from './resolvers/nodeResolver';\n\n// re-export\nexport {\n\tArchDockerfileResolver,\n\tBundle,\n\tDockerfileResolver,\n\tDockerfileTemplateResolver,\n\tFileInfo,\n\tResolver,\n};\n\nexport interface ResolvedBundle {\n\tprojectType: string;\n\ttarStream: tar.Pack;\n}\n\nexport function resolveBundle(\n\tbundle: Bundle,\n\tresolvers: Resolver[],\n): Promise<ResolvedBundle> {\n\treturn new Promise<ResolvedBundle>(\n\t\t(\n\t\t\tresolve: (resolved: ResolvedBundle) => void,\n\t\t\treject: (err: Error) => void,\n\t\t) => {\n\t\t\tconst extract = tar.extract();\n\t\t\tconst pack = tar.pack();\n\n\t\t\textract.on('entry',\n\t\t\t\t(\n\t\t\t\t\theader: tar.TarHeader,\n\t\t\t\t\tstream: NodeJS.ReadableStream,\n\t\t\t\t\tnext: () => void,\n\t\t\t\t) => {\n\t\t\t\t\t// Read the contents into a buffer\n\t\t\t\t\tUtils.streamToBuffer(stream).then((buffer: Buffer) => {\n\t\t\t\t\t\t// send the file along to the next tar stream regardless\n\t\t\t\t\t\tpack.entry(header, buffer);\n\n\t\t\t\t\t\t// create a FileInfo from the header\n\t\t\t\t\t\tconst info: FileInfo = {\n\t\t\t\t\t\t\tname: Utils.normalizeTarEntry(header.name),\n\t\t\t\t\t\t\tsize: header.size,\n\t\t\t\t\t\t\tcontents: buffer,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Now provide the resolvers with the information and file\n\t\t\t\t\t\tresolvers.map(resolver => {\n\t\t\t\t\t\t\tresolver.entry(info);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\textract.on('finish', () => {\n\t\t\t\tconst maybeResolver = _(resolvers)\n\t\t\t\t\t.orderBy((val: Resolver) => val.priority, ['desc'])\n\t\t\t\t\t.find((r: Resolver) => r.isSatisfied(bundle));\n\n\t\t\t\t// if no resolver was happy this is an error\n\t\t\t\tif (maybeResolver === undefined) {\n\t\t\t\t\treject(new Error('No project type resolution could be performed'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst resolver: Resolver = maybeResolver;\n\n\t\t\t\t// Now that we have a resolver, add the new files needed to the stream\n\t\t\t\tresolver\n\t\t\t\t.resolve(bundle)\n\t\t\t\t.then(additionalItems => {\n\t\t\t\t\treturn Promise.map(additionalItems, (file: FileInfo) => {\n\t\t\t\t\t\tpack.entry({ name: file.name, size: file.size }, file.contents);\n\t\t\t\t\t\tif (file.name === 'Dockerfile') {\n\t\t\t\t\t\t\treturn bundle.callDockerfileHook(file.contents.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\treturn Promise.try(() => {\n\t\t\t\t\t\t\tif (resolver.name === 'Standard Dockerfile') {\n\t\t\t\t\t\t\t\t// The hook will not have been ran on this file yet, as the Dockerfile was not added\n\t\t\t\t\t\t\t\t// as an additional item\n\t\t\t\t\t\t\t\treturn bundle.callDockerfileHook(\n\t\t\t\t\t\t\t\t\t(resolver as DockerfileResolver).getDockerfileContents(),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t// all of the extra files have now been added to the stream, resolve\n\t\t\t\t\t\t// the promise with it\n\t\t\t\t\t\tpack.finalize();\n\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tprojectType: resolver.name,\n\t\t\t\t\t\t\ttarStream: pack,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t\t});\n\n\t\t\t// Send the bundle away to be parsed\n\t\t\tbundle.tarStream.pipe(extract);\n\t\t},\n\t);\n}\n\nexport function getDefaultResolvers(): Resolver[] {\n\treturn [\n\t\tnew DockerfileResolver(),\n\t\tnew DockerfileTemplateResolver(),\n\t\tnew ArchDockerfileResolver(),\n\t\tnew NodeResolver(),\n\t];\n}\n"],"sourceRoot":"src"}