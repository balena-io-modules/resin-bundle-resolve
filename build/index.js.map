{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as Promise from 'bluebird'\nimport * as _ from 'lodash'\nimport * as tar from 'tar-stream'\n\nimport Bundle from './bundle'\nimport { FileInfo } from './fileInfo'\nimport { Resolver } from './resolver'\nimport * as Utils from './utils'\n\n// Import some default resolvers\nimport DockerfileResolver from './resolvers/dockerfile'\nimport DockerfileTemplateResolver from './resolvers/dockerfileTemplate'\nimport ArchDockerfileResolver from './resolvers/archDockerfile'\nimport NodeResolver from './resolvers/nodeResolver'\n\n// re-export\nexport { ArchDockerfileResolver,\n         Bundle,\n         DockerfileResolver,\n         DockerfileTemplateResolver,\n         FileInfo,\n         Resolver }\n\nexport interface ResolvedBundle {\n\tprojectType: string,\n\ttarStream: tar.Pack\n}\n\nexport function resolveBundle(bundle: Bundle, resolvers: Resolver[]): Promise<ResolvedBundle> {\n\treturn new Promise<ResolvedBundle>((resolve: (resolved: ResolvedBundle) => void,\n\t                                    reject: (err: Error) => void) => {\n\t\tconst extract = tar.extract()\n\t\tconst pack = tar.pack()\n\n\t\textract.on('entry', (header: tar.TarHeader, stream: NodeJS.ReadableStream, next: () => void) => {\n\t\t\t// Read the contents into a buffer\n\t\t\tUtils.streamToBuffer(stream)\n\t\t\t.then((buffer: Buffer) => {\n\t\t\t\t// send the file along to the next tar stream regardless\n\t\t\t\tpack.entry(header, buffer)\n\n\t\t\t\t// create a FileInfo from the header\n\t\t\t\tconst info: FileInfo = {\n\t\t\t\t\tname: Utils.normalizeTarEntry(header.name),\n\t\t\t\t\tsize: header.size,\n\t\t\t\t\tcontents: buffer\n\t\t\t\t}\n\n\t\t\t\t// Now provide the resolvers with the information and file\n\t\t\t\tresolvers.map((resolver) => {\n\t\t\t\t\tresolver.entry(info)\n\t\t\t\t})\n\t\t\t\tnext()\n\t\t\t})\n\t\t})\n\n\t\textract.on('finish', () => {\n\n\t\t\tlet maybeResolver = _(resolvers)\n\t\t\t\t.orderBy((val: Resolver) => val.priority, ['desc'])\n\t\t\t\t.find((resolver: Resolver) => resolver.isSatisfied(bundle))\n\n\t\t\t// if no resolver was happy this is an error\n\t\t\tif (maybeResolver === undefined) {\n\t\t\t\treject(new Error('No project type resolution could be performed'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst resolver: Resolver = maybeResolver\n\n\t\t\t// Now that we have a resolver, add the new files needed to the stream\n\t\t\tresolver.resolve(bundle)\n\t\t\t.then((additionalItems) => {\n\t\t\t\tadditionalItems.map((file: FileInfo) => {\n\t\t\t\t\tpack.entry({ name: file.name, size: file.size }, file.contents)\n\t\t\t\t})\n\n\t\t\t\t// all of the extra files have now been added to the stream, resolve\n\t\t\t\t// the promise with it\n\t\t\t\tpack.finalize()\n\n\t\t\t\tresolve({\n\t\t\t\t\tprojectType: resolver.name,\n\t\t\t\t\ttarStream: pack\n\t\t\t\t})\n\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\treject(error)\n\t\t\t})\n\n\t\t})\n\n\t\t// Send the bundle away to be parsed\n\t\tbundle.tarStream.pipe(extract)\n\n\t})\n}\n\nexport function getDefaultResolvers(): Resolver[] {\n\treturn [\n\t\tnew DockerfileResolver(),\n\t\tnew DockerfileTemplateResolver(),\n\t\tnew ArchDockerfileResolver(),\n\t\tnew NodeResolver()\n\t]\n}\n"],"sourceRoot":"src"}